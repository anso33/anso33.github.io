<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on anso33-tech-log</title>
    <link>https://anso33.github.io/categories/java/</link>
    <description>Recent content in java on anso33-tech-log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Tue, 23 Jan 2024 17:19:09 +0900</lastBuildDate><atom:link href="https://anso33.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>item01. 생성자 대신 정적 팩토리 메서드를 고려한다.</title>
      <link>https://anso33.github.io/post/efj3-item1/</link>
      <pubDate>Tue, 23 Jan 2024 17:19:09 +0900</pubDate>
      
      <guid>https://anso33.github.io/post/efj3-item1/</guid>
      <description>생성자 말고도 정적 팩토리 메서드를 사용할 수 있으니 각자의 장단점을 잘 알고 상황에 알맞은 선택을 하자.
정적 팩토리 메서드, static factory method 클래스의 인스턴스를 반환하는 단순한 정적 메서드
public static Boolean valueOf (boolean b) { return b ? Boolean.TRUE : Boolean.FALSE; } 정적 팩토리 메서드의 장점 반환될 객체의 특성을 설명하는 이름을 가질 수 있다.
한 클래스 안에 시그니처가 같은 생성자가 여러 개 필요할 때 생성자를 정적 팩터리 메서드로 바꾸고 각각의 차이를 잘 드러내는 이름을 지어준다.</description>
    </item>
    
    <item>
      <title>Jvm Start</title>
      <link>https://anso33.github.io/post/jvm-start/</link>
      <pubDate>Sun, 22 Oct 2023 14:05:54 +0900</pubDate>
      
      <guid>https://anso33.github.io/post/jvm-start/</guid>
      <description>JVM Write Once, Run Anywhere JVM은 Java Virtual Machine으로 자바 코드 또는 어플리케이션을 실행할 수 있는 런타임환경을 제공하는 엔진을 말합니다. 일반적으로 다른 프로그래밍 언어에서는 컴파일러가 특정한 시스템에 대한 기계어를 생성하기 때문에 한번 빌드된 코드는 빌드했던 시스템에서만 실행할 수 있습니다. 하지만, 자바 컴파일러(javac)는 JVM(Java Virtual Machine)으로 알려진 VM(Virtual Machine)에 대한 코드를 생성하기 때문에 운영체제에 종속되지 않고 한번 컴파일된 코드는 JVM이 있다면 어디서든 바로 실행할 수 있습니다.
자바로 작성한 코드가 실행되기까지 자바 프로그램을 실행하면 JVM은 OS로부터 메모리를 할당 받습니다.</description>
    </item>
    
  </channel>
</rss>
